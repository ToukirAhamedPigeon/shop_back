Let's understand the hybrid secured Athentication model I want to implement:
    - Now, I have already implemented secured JWT Authentication in my System.
    - What is already implemented? 
    - I have installed and set up Redux Store and Redux Async Thunk in my React App.
    - I created a authSlice in redux store.
    - The AuthSlice Contain redux async thunk function for Login API Call.
    - When calling login api in server, request is taking in AuthController Login Task. 
    - Login Task is Sending to the AuthService via IAuthService and validate the credentials in UserRepository via IUserRepository
    - Then, if user validated inside AuthService a short-lived AccessToken and long-lived RefreshToken Generated
    - Refresh Token is saved in database and HttpOnly-Cookie SameSite Strict. Acceess Token are send to the client along with User informations and they are saved in state variables of redux store authSlice.
    - next time with every authenticated api request accessToken is taken from the redux store and attach in the bearer token. I have a central axios config file in lib folder where this settings configured centrally and I used the exported api.post or api.get functions in every api call in the entire react app. I configured the bearer token set up in that axios.ts file for once and reused in whole application. As the access token has a short life (2-5 mins). After that expires, initially the api request fails and the axios.ts retry the api request if it fails again it auto all the api to refresh token in server and the refresh token api calling function is also in authSlice.ts
    - server recived the request in AuthController, verify the refreshToken saved in DB and HttpOnly-cookie gives new access token if refresh token is not revoked or expired. in react app axios.ts retry the previous api with new access token.
    - not only from axios.ts, if the application page reload, the react app on page load also call the refresh token api via authSlice function. As redux state get cleared on page load, so on that onload refresh token api calling redux state reinitialized with new accessToken and user info in authSlice.ts.
    - any how if refresh token revoked or expires in server, It sends error code to the client and client auto clear the authSlice State variable (accessToken and UserInfo) and sent to the login page, That means App is now logged out. As there is a protectedRoute Component which need to verify the authSlice AccessToken Value to show protected components or pages wrapped in it (Like Admin Dashboard).
    - If User logout from app, the logout api calls from authSlice.ts, in server refresh token get revoked and in client all state variables get cleared and sent to login page immidiately. We have also options for Logout from All Devices for same user, Logout from other Devices (Except Current Browser)  
    - Ok all the process is working fine. Now alongside the JWT verification I want to ensure CSRF Protection also. 
    - The Site will be protected with two types of tokens CSRF Tokens and JWT Tokens
    - First of all user browse to the site from a browser from frontend (React.js SPA App)
    - Suppose that is a non authenticated Landing Page / Login Page / Sign Up Page
    - On the Page load a api request will make in server (Dot Net Core Webapi) for CSRF Token
    - Server will generate a CSRF Token with IAntiforgery and will store that in http-cookie (non-readable for JS)
    - Then with every api (authenticated or non-authenticated) request the CSRF will be send to server.
    - Server will verify the token to be ensured that the request is coming from the React App only not from outside.
    - If any how page reload in browser, new csrf token will be generated and previous token will be deleted.
    - Csrf token also contain a expiry period, after the period over the token will be deleted.
    - Usually the token will have a long expiry period. 2-3 days.
    - If token expired, user need to reload application to regenerate new one.
    - After user loggedin, in every request both jwt access token and csrf token will be checked in server with a middleware. 
    - I can share my all frontend (main.tsx, app.tsx, axios.ts, authSlice.ts, protected route, login page, layouts, logout component, dashboard page) and backend (Program.cs, all Conrollers,  Sevices, Repositories, DTOs, DBContext, External Service and Repository files, Models etc) codes with you.    
    - Generate all detail and modified codes. Ask if you need anything to modify. Strictly follow SOLID principles.